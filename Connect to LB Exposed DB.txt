Download the certificate file from the OCI service

openssl x509 -outform der -in certificate.pem -out ssl_certificate.der                

keytool -import -alias orajks -keystore clientkeystore.jks -file ssl_certificate.der                


keytool -list -v -keystore clientkeystore.jks                                            

---

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;
 
public class OracleSslConnectionTest {
    private static final String DB_SERVER_NAME = "<load balancer ip>";
    private static final Integer SSL_PORT = <load balancer port>;
    private static final String DB_ServiceName = "<pdb service name>";
    private static final String DB_USER = "<db schema/user name>";
    private static final String DB_PASSWORD = "<db schema/user password>";
    // This key store has only the prod root ca.
    private static final String KEY_STORE_FILE_PATH = "<keystore location (.jks file)>";
    private static final String KEY_STORE_PASS = "<keystore password>";
 
    public static void main(String[] args) throws SQLException {
        final Properties properties = new Properties();
        final String connectionString = String.format(
                "jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCPS)(HOST=%s)(PORT=%d))(CONNECT_DATA=(DB_ServiceName=%s)))",
                DB_SERVER_NAME, SSL_PORT, DB_SID);
        properties.put("user", DB_USER);
        properties.put("password", DB_PASSWORD);
        properties.put("oracle.jdbc.J2EE13Compliant", "true");
        properties.put("javax.net.ssl.trustStore", KEY_STORE_FILE_PATH);
        properties.put("javax.net.ssl.trustStoreType", "JKS");
        properties.put("javax.net.ssl.trustStorePassword", KEY_STORE_PASS);
        final Connection connection = DriverManager.getConnection(connectionString, properties);
        // If no exception, that means handshake has passed, and an SSL connection can be opened
    }
}